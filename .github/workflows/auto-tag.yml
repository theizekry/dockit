name: Auto Tag

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags and releases

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper tag detection
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Tag
        id: get_tag
        run: |
          echo "Fetching all tags..."
          git fetch --tags
          # Get all tags and sort them by version
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1 || echo "v0.0.0")
          echo "Latest tag found: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Get Latest Commit Message
        id: get_commit_msg
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          echo "Latest commit message: $commit_msg"
          echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT

      - name: Determine Version Bump
        id: version_bump
        run: |
          commit_msg=${{ steps.get_commit_msg.outputs.commit_msg }}
          if [[ $commit_msg =~ ^(feat|feature|major): ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ $commit_msg =~ ^(feat|feature|minor): ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump Version
        id: bump
        run: |
          tag=${{ steps.get_tag.outputs.latest_tag }}
          echo "Processing tag: $tag"
          version="${tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
          
          bump_type=${{ steps.version_bump.outputs.bump }}
          case $bump_type in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac
          
          new_tag="v$major.$minor.$patch"
          echo "New tag will be: $new_tag (bump type: $bump_type)"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          echo "Creating new tag: ${{ steps.bump.outputs.new_tag }}"
          git tag ${{ steps.bump.outputs.new_tag }}
          echo "Pushing tag to remote..."
          git push origin ${{ steps.bump.outputs.new_tag }} --force
          echo "Tag pushed successfully!"
