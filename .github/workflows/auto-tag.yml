name: Auto Tag

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags and releases

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper tag detection
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Tag
        id: get_tag
        run: |
          echo "Fetching all tags..."
          git fetch --tags
          # Get all tags and sort them by version
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1 || echo "v0.0.0")
          echo "Latest tag found: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Get Latest Commit Hash
        id: get_commit
        run: |
          commit_hash=$(git rev-parse HEAD)
          echo "Current commit hash: $commit_hash"
          echo "commit_hash=$commit_hash" >> $GITHUB_OUTPUT

      - name: Check if commit is already tagged
        id: check_commit
        run: |
          commit_hash=${{ steps.get_commit.outputs.commit_hash }}
          if git describe --exact-match $commit_hash 2>/dev/null; then
            echo "Commit $commit_hash is already tagged, skipping..."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Commit $commit_hash is not tagged, will create new tag"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump Patch Version
        if: steps.check_commit.outputs.skip == 'false'
        id: bump
        run: |
          tag=${{ steps.get_tag.outputs.latest_tag }}
          echo "Processing tag: $tag"
          version="${tag#v}"
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          
          # Check if the new tag already exists
          while git rev-parse "$new_tag" >/dev/null 2>&1; do
            echo "Tag $new_tag already exists, incrementing patch version..."
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          done
          
          echo "New tag will be: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          echo "Creating new tag: ${{ steps.bump.outputs.new_tag }}"
          git tag ${{ steps.bump.outputs.new_tag }}
          echo "Pushing tag to remote..."
          git push origin ${{ steps.bump.outputs.new_tag }} --force
          echo "Tag pushed successfully!"
